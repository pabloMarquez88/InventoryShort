/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.is.gui.misc;

import com.mycompany.is.Parent;
import com.mycompany.is.dto.ExportImportDTO;
import com.mycompany.is.entity.HistoryItem;
import com.mycompany.is.entity.Item;
import com.mycompany.is.service.ExportImportService;
import com.mycompany.is.service.HistoryService;
import com.mycompany.is.service.ItemService;
import com.thoughtworks.xstream.XStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Escritorio
 */
public class ItemExportImportFrm extends javax.swing.JInternalFrame {
    
    private static ItemExportImportFrm INSTANCE;
    private JFrame frame;
    
    public static ItemExportImportFrm getInstance(JFrame parent){
        if (INSTANCE == null) {
            return new ItemExportImportFrm(parent);
        }        
        return INSTANCE;
    }
    
    public ItemExportImportFrm(JFrame parent) {
        initComponents();
        this.frame = parent;
    }
    
    private Object getSpringBean(String beanName){
        return ((Parent) this.frame).getSpringBean(beanName);
    }
    
    /**
     * Creates new form ItemListFrm
     */
    public ItemExportImportFrm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnExportar = new javax.swing.JButton();
        btnImportar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("Backup");

        btnExportar.setText("EXPORTAR");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        btnImportar.setText("IMPORTAR");
        btnImportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExportar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExportar, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(btnImportar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        this.export();        
    }//GEN-LAST:event_btnExportarActionPerformed

    private void btnImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportarActionPerformed
        this.importData();
    }//GEN-LAST:event_btnImportarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnImportar;
    // End of variables declaration//GEN-END:variables

    private void export() {
        ItemService itemService = (ItemService) this.getSpringBean("itemService");
        HistoryService historyService = (HistoryService) this.getSpringBean("historyService");
        List<Item> items = itemService.getAllItems();
        List<HistoryItem> hItems = historyService.getAllHistoryItems();
        ExportImportDTO dto = ExportImportDTO.builder()
                .item(items)
                .history(hItems)
                .build();
        XStream xstream = new XStream();
        String xml = xstream.toXML(dto);
        this.save(xml);
    }

    private void save(String xml) {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Indique donde guardar los datos");   
        fileChooser.setSelectedFile(new File("C:\\Export.xml"));
            
        int userSelection = fileChooser.showSaveDialog(frame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                System.out.println("Save as file: " + fileToSave.getAbsolutePath());
                BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave));
                writer.write(xml);    
                writer.close();
                JOptionPane.showMessageDialog(null, "Operación realizada con Exito");
            } catch (Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error interno");
            }
        }
    }

    private void importData() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File("C:\\Export.xml"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            StringBuilder resultStringBuilder = new StringBuilder();
            try {
                InputStream inputStream = new FileInputStream(selectedFile);
                try (BufferedReader br
                  = new BufferedReader(new InputStreamReader(inputStream))) {
                    String line;
                    while ((line = br.readLine()) != null) {
                        resultStringBuilder.append(line).append("\n");
                    }
                }
                this.loadData(resultStringBuilder.toString());
            } catch (Exception e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error interno");
            }
        }
    }

    private void loadData(String xml) {
        XStream xstream = new XStream();
        ExportImportDTO dto = (ExportImportDTO) xstream.fromXML(xml);
        ExportImportService service = (ExportImportService) this.getSpringBean("exportImportService");                
        int input = JOptionPane.showConfirmDialog(null, "Esta Operación reemplazara todos los datos actuales", "Desea continuar?",
               JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (input == 0){
            service.loadAllData(dto);
            JOptionPane.showMessageDialog(null, "Operacion Exitosa");
        } else {
            JOptionPane.showMessageDialog(null, "Operacion Cancelada");
        }
         
    }

   
}
